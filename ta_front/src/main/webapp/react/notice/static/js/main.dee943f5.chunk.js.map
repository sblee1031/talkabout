{"version":3,"sources":["ApiService.js","component/notice/NoticePaging.jsx","component/notice/NoticeListComponent.jsx","component/notice/paginate.jsx","component/notice/DetailNoticeComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["NOTICE_URL","NC_URL","axios","get","withCredentials","word","notice_no","notice","post","put","delete","com_no","noticeComment","console","log","Pagination","props","itemsCount","pageSize","currentPage","onPageChange","totalPage","Math","ceil","pageGroup","last","first","prevButton","nextButton","pages","_","range","style","display","justifyContent","className","onClick","map","page","cursor","NoticeListComponent","reloadNoticeList","state","filteredData","length","ApiService","fetchNotices","then","res","data","notices","setState","loginInfo","catch","err","handleChange","e","target","name","value","handleSubmit","preventDefault","result","searchKeyword","filter","notice_title","notice_contents","search","handlePageChange","addNotice","window","localStorage","removeItem","history","push","editNotice","noticeNo","setItem","deleteNotice","message","bind","this","count","pagingNotice","pagedNotice","items","pageNumber","startIndex","slice","take","paginate","marginTop","onSubmit","margin","size","placeholder","onChange","marginRight","Button","type","Table","hover","textAlign","fontSize","index","notice_type","to","pathname","notice_date","notice_views","notice_admin","Component","DetailNoticeComponent","reloadNotice","fetchNoticeByNo","fetchNC","notice_comments","list","deleteNC","comNo","comment","com_notice","com_contents","input_comment","com_mem","addNC","match","params","no","location","width","colSpan","height","valign","colspan","variant","color","id","class","member_nickName","com_date","undefined","member_no","App","Container","exact","path","component","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dee943f5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst NOTICE_URL = \"http://localhost:9999/ta_back/notice\";\r\nconst NC_URL = \"http://localhost:9999/ta_back/noticecomment\";\r\n\r\nclass ApiService {\r\n    fetchNotices() {\r\n        return axios.get(NOTICE_URL + '/list', { withCredentials: true });\r\n    }\r\n\r\n    fetchNoticeByWord(word) {\r\n        return axios.get(NOTICE_URL + '/list/' + word, { withCredentials: true });\r\n    }\r\n\r\n    fetchNoticeByNo(notice_no) {\r\n        return axios.get(NOTICE_URL + '/' + notice_no, { withCredentials: true });\r\n    }\r\n\r\n    addNotice(notice){\r\n        return axios.post(NOTICE_URL, notice, { withCredentials: true });\r\n    }\r\n\r\n    editNotice(notice){\r\n        return axios.put(NOTICE_URL + '/' + notice.notice_no, notice, { withCredentials: true })\r\n    }\r\n\r\n    deleteNotice(notice_no){\r\n        return axios.delete(NOTICE_URL + '/' + notice_no, { withCredentials: true });\r\n    }\r\n\r\n    // Notice Comment\r\n    // http://localhost:9999/back/noticecomment/list/공지사항번호\r\n    fetchNC(notice_no){\r\n        return axios.get(NC_URL + '/list/' + notice_no);\r\n    }\r\n\r\n    // http://localhost:9999/back/noticecomment/댓글번호\r\n    fetchNCOne(com_no){\r\n        return axios.get(NC_URL + '/one/' + com_no);\r\n    }\r\n\r\n    // http://localhost:9999/back/noticecomment\r\n    addNC(noticeComment){\r\n        console.log(noticeComment);\r\n        return axios.post(NC_URL, noticeComment);\r\n    }\r\n\r\n    editNC(noticeComment){\r\n        return axios.put(NC_URL + '/' + noticeComment.com_no, noticeComment);\r\n    }\r\n\r\n    deleteNC(com_no){\r\n        return axios.delete(NC_URL + '/' + com_no);\r\n    }\r\n}\r\n\r\nexport default new ApiService();","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Pagination = (props) => {\r\n  //const pageCount = 5; //한페이지 표시될 개수\r\n  const { itemsCount, pageSize, currentPage, onPageChange } = props; // 각각 아이템(영화목록) 개수, 한 페이지에 보여줄 아이템(영화목록) 개수\r\n  var totalPage = Math.ceil(itemsCount / pageSize); // 몇 페이지가 필요한지 계산 토탈페이지수\r\n  const pageGroup = Math.ceil(currentPage / pageSize); //한 페이지에 보여줄 페이지 그룹수\r\n  if (totalPage === 1) return null; // 1페이지 뿐이라면 페이지 수를 보여주지 않음\r\n\r\n  var last = pageGroup * pageSize; // 화면에 보여질 마지막 페이지 번호\r\n  if (last > totalPage) last = totalPage;\r\n  var first = last - (pageSize - 1); // 화면에 보여질 첫번째 페이지 번호\r\n  if (first < 1) first = 1;\r\n  var next = last + 1;\r\n  var prev = first - 1;\r\n  var prevButton = false;\r\n  if (currentPage == 1) {\r\n    prevButton = false;\r\n  } else {\r\n    prevButton = true;\r\n  }\r\n  var nextButton = false;\r\n  if (currentPage == totalPage) {\r\n    nextButton = false;\r\n  } else {\r\n    nextButton = true;\r\n  }\r\n  const pages = _.range(first, last + 1); // 마지막 페이지에 보여줄 컨텐츠를 위해 +1, https://lodash.com/docs/#range 참고\r\n\r\n  return (\r\n    <nav style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      {\" \"}\r\n      {/* VSCode 입력: nav>ul.pagination>li.page-item>a.page-link */}\r\n      <ul className=\"pagination\">\r\n        {prevButton && (\r\n          <li className=\"prev\">\r\n            <Link\r\n              className=\"page-link\"\r\n              onClick={() => onPageChange(currentPage - 1)}\r\n            >\r\n              &laquo;\r\n            </Link>\r\n          </li>\r\n        )}\r\n        {pages.map((page) => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"} // Bootstrap을 이용하여 현재 페이지를 시각적으로 표시\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <Link className=\"page-link\" onClick={() => onPageChange(page)}>\r\n              {page}\r\n            </Link>{\" \"}\r\n            {/* 페이지 번호 클릭 이벤트 처리기 지정 */}\r\n          </li>\r\n        ))}\r\n        {nextButton && (\r\n          <li className=\"next\">\r\n            <Link\r\n              className=\"page-link\"\r\n              onClick={() => onPageChange(currentPage + 1)}\r\n            >\r\n              &raquo;\r\n            </Link>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ApiService from \"../../ApiService\";\r\n\r\nimport Pagination from \"./NoticePaging\";\r\nimport { paginate } from \"./paginate\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport \"../../css/bootstrap.css\";\r\n// import { Button } from '@material-ui/core';\r\n\r\nclass NoticeListComponent extends Component {\r\n  /*\r\n        Constructor\r\n        - 생성자 메소드로 컴포넌트가 처음 생성 시 실행\r\n        - 이 메소드에서 기본 state를 설정 가능\r\n\r\n        state\r\n    */\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      notices: [],\r\n      filteredData: [],\r\n      searchKeyword: \"\",\r\n      pageSize: 5,\r\n      currentPage: 1,\r\n      loginInfo: null,\r\n      message: null,\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  /*\r\n        componentDidMount\r\n        - 컴포넌트가 만들어지고 첫 렌더링을 완료 후 실행되는 메소드\r\n        - 이 메소드 내에서 다른 JS 프레임워크를 연동하거나 setTimeout, setInterval 및 AJAX 처리 등을 삽입\r\n    */\r\n\r\n  componentDidMount() {\r\n    this.reloadNoticeList();\r\n  }\r\n\r\n  reloadNoticeList = () => {\r\n    if (this.state.filteredData.length === 0) {\r\n      ApiService.fetchNotices()\r\n        .then((res) => {\r\n          console.log(\"res.data.notices\", res.data.notices.length);\r\n          this.setState({\r\n            notices: res.data.notices,\r\n            loginInfo: res.data.loginInfo,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"reloadNoticeList() Error!\", err);\r\n        });\r\n    } else {\r\n      this.setState({\r\n        notices: this.state.filteredData,\r\n        filteredData: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  // 검색 기능\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let value = this.state.searchKeyword;\r\n    let result = [];\r\n\r\n    result = this.state.notices.filter((data) => {\r\n      console.log(\"data : \", data.notice_title, \" / \", data.notice_contents);\r\n      console.log(\"value : \", value);\r\n      return (\r\n        data.notice_title.search(value) !== -1 ||\r\n        data.notice_contents.search(value) !== -1\r\n      );\r\n    });\r\n\r\n    this.setState({ filteredData: result }, () => {\r\n      this.reloadNoticeList();\r\n    });\r\n\r\n    this.setState({\r\n      searchKeyword: \"\",\r\n      currentPage: 1,\r\n    });\r\n  };\r\n\r\n  // 페이징\r\n  handlePageChange = (page) => {\r\n    this.setState({\r\n      currentPage: page,\r\n    });\r\n  };\r\n\r\n  addNotice = () => {\r\n    window.localStorage.removeItem(\"noticeNo\");\r\n    // this.props.history.push('/add-notice');\r\n    this.props.history.push(\"./notice/write\");\r\n  };\r\n\r\n  /*\r\n        Edit 버튼을 누르면 브라우저 로컬스토리지를 사용하여 해당 유저 id를 일시적으로 저장\r\n        route를 통해 EditUserComponent.jsx로 이동\r\n        route에서 \"/edit-user\" url로 이동 시 EditUserComponent.jsx를 출력하도록 설정\r\n    */\r\n\r\n  editNotice = (noticeNo) => {\r\n    window.localStorage.setItem(\"noticeNo\", noticeNo);\r\n    // this.props.history.push('/edit-notice');\r\n    this.props.history.push(\"./notice/modify\");\r\n  };\r\n\r\n  /*\r\n        Delete 버튼을 누르면 API 통신을 사용하여 DB에서 해당 유저를 삭제\r\n        filter 기능을 통해 state에 있는 users 배열에서 삭제된 해당 유저 id를 제외하고 다시 배열로 표현\r\n    */\r\n  deleteNotice = (noticeNo) => {\r\n    ApiService.deleteNotice(noticeNo)\r\n      .then((res) => {\r\n        this.setState({\r\n          message: \"Notice Deleted Successfully.\",\r\n        });\r\n        this.setState({\r\n          notices: this.state.notices.filter(\r\n            (notice) => notice.notice_no !== noticeNo\r\n          ),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"deleteNotice() Error!\", err);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const count = this.state.notices.length;\r\n\r\n    const pagingNotice = {\r\n      notices: this.state.notices,\r\n      pageSize: this.state.pageSize,\r\n      currentPage: this.state.currentPage,\r\n    };\r\n\r\n    const pagedNotice = paginate(\r\n      pagingNotice.notices,\r\n      pagingNotice.currentPage,\r\n      pagingNotice.pageSize\r\n    );\r\n    return (\r\n      <div className=\"container\" style={{ marginTop: \"5%\" }}>\r\n        <h2 style={{ display: \"flex\", justifyContent: \"center\" }}>공지사항</h2>\r\n\r\n        {/* <Button variant=\"contained\" color=\"primary\" onClick={this.addNotice}> Add Notice </Button> */}\r\n        <form\r\n          onSubmit={this.handleSubmit}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\t\",\r\n            margin: \"0 auto\",\r\n            marginTop: \"5%\",\r\n          }}\r\n        >\r\n          <input\r\n            size=\"25\"\r\n            placeholder=\"검색할 단어를 입력하세요\"\r\n            value={this.state.searchKeyword}\r\n            onChange={this.handleChange}\r\n            name=\"searchKeyword\"\r\n            style={{ marginRight: \"5px\" }}\r\n          />\r\n          <Button className=\"btn btn-success\" type=\"submit\">\r\n            검색\r\n          </Button>\r\n        </form>\r\n        <div style={{ marginTop: \"30px\" }}>\r\n          <Table\r\n            hover\r\n            className=\"table table-hover\"\r\n            style={{ textAlign: \"center\", marginTop: \"10px\" }}\r\n          >\r\n            <thead style={{ fontSize: \"15pt\", marginTop: \"10px\" }}>\r\n              <tr className=\"table-primary\">\r\n                <th>번호</th>\r\n                <th>타입</th>\r\n                <th>제목</th>\r\n                <th>작성일</th>\r\n                <th>조회수</th>\r\n                <th>작성자</th>\r\n                {/* <th>Edit</th>\r\n                    <th>Delete</th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"table-light\">\r\n              {pagedNotice.map((notice, index) => (\r\n                <tr className=\"data1\" key={notice.notice_no}>\r\n                  <td className=\"board_no\">\r\n                    {(this.state.currentPage - 1) * this.state.pageSize +\r\n                      index +\r\n                      1}\r\n                  </td>\r\n                  <td className=\"board_type\">{notice.notice_type}</td>\r\n                  <td className=\"board_title\">\r\n                    {/* <Link to={`/notices/${notice.notice_no}`}>{ notice.notice_title }</Link> */}\r\n                    {/* <Link to={`notice/${notice.notice_no}`} state={ loginInfo }>{ notice.notice_title }</Link>  */}\r\n                    <Link\r\n                      to={{\r\n                        pathname: `notice/${notice.notice_no}`,\r\n                        state: { loginInfo: this.state.loginInfo },\r\n                      }}\r\n                    >\r\n                      {notice.notice_title}\r\n                    </Link>\r\n                  </td>\r\n                  <td className=\"board_date\">{notice.notice_date}</td>\r\n                  <td className=\"board_views\">{notice.notice_views}</td>\r\n                  <td className=\"board_mem\">{notice.notice_admin}</td>\r\n                  {/* <td>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={()=> this.editNotice(notice.notice_no)}> Edit </Button>\r\n                      </td>\r\n                      <td>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={()=> this.deleteNotice(notice.notice_no)}> Delete </Button>\r\n                      </td> */}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          <Pagination\r\n            itemsCount={count}\r\n            pageSize={this.state.pageSize}\r\n            currentPage={this.state.currentPage}\r\n            onPageChange={this.handlePageChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoticeListComponent;\r\n","import _ from 'lodash';\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize; // 자를 배열의 시작점\r\n\r\n  return _(items)\r\n    .slice(startIndex) // 시작점부터 배열을 자르되\r\n    .take(pageSize) // pageSize만큼의 배열을 취함\r\n    .value(); // lodash wrapper 객체를 regular 배열로 변환\r\n}","import React, { Component } from \"react\";\r\nimport ApiService from \"../../ApiService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"../../css/bootstrap.css\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\n\r\n// const styles = () => ({\r\n//     boardTopBackground: {\r\n//         zIndex: 1,\r\n//         backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n//         width: '100%',\r\n//         height: '12rem',\r\n//         position: 'absolute'\r\n//     },\r\n//     boardTop: {\r\n//         height: '12em',\r\n//         width: '100%',\r\n//         position: 'relative',\r\n//     },\r\n//     boardTopText: {\r\n//         zIndex: 2,\r\n//         position: 'absolute',\r\n//         bottom: '3rem',\r\n//         left: '3rem',\r\n//         fontSize: \"2rem\",\r\n//         fontWeight: 'bold',\r\n//         color: 'white',\r\n//     },\r\n// })\r\n\r\nclass DetailNoticeComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(\"테스트 1 : \", props);\r\n\r\n    this.state = {\r\n      notice_no: this.props.match.params.no,\r\n      notice_type: \"\",\r\n      notice_title: \"\",\r\n      notice_contents: \"\",\r\n      notice_admin: \"\",\r\n      notice_comments: [],\r\n      notice_date: \"\",\r\n      notice_views: \"\",\r\n      input_comment: \"\",\r\n      message: \"\",\r\n      loginInfo: this.props.location.state.loginInfo,\r\n    };\r\n    console.log(\"테스트 2 : \", this.state.loginInfo);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reloadNotice();\r\n  }\r\n\r\n  reloadNotice = () => {\r\n    ApiService.fetchNoticeByNo(this.state.notice_no)\r\n      .then((res) => {\r\n        this.setState({\r\n          notice_type: res.data.notice.notice_type,\r\n          notice_title: res.data.notice.notice_title,\r\n          notice_contents: res.data.notice.notice_contents,\r\n          notice_date: res.data.notice.notice_date,\r\n          notice_views: res.data.notice.notice_views,\r\n          notice_admin: res.data.notice.notice_admin,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"reloadNotice() Error!\", err);\r\n      });\r\n    ApiService.fetchNC(this.state.notice_no)\r\n      .then((res) => {\r\n        this.setState({\r\n          notice_comments: res.data.list,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"reloadNoticeList() Error!\", err);\r\n      });\r\n  };\r\n\r\n  deleteNC = (comNo) => {\r\n    ApiService.deleteNC(comNo)\r\n      .then((res) => {\r\n        this.setState({\r\n          notice_comments: this.state.notice_comments.filter(\r\n            (comment) => comment.com_no !== comNo\r\n          ),\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"deleteNC() Error!\", err);\r\n      });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value, // <- 변경 후\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let noticeComment = {\r\n      com_notice: this.state.notice_no,\r\n      com_contents: this.state.input_comment,\r\n      com_mem: this.state.loginInfo,\r\n    };\r\n\r\n    ApiService.addNC(noticeComment)\r\n      .then((res) => {\r\n        this.setState({\r\n          message: \"addNC Completed\",\r\n        });\r\n        console.log(this.state.message);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"addNC() 에러\", err);\r\n      });\r\n\r\n    this.reloadNotice();\r\n\r\n    this.setState({\r\n      input_comment: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{ marginTop: \"5%\" }}>\r\n        <h2 style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          상세페이지\r\n        </h2>\r\n        <div>\r\n          <Table className=\"table\" hover>\r\n            <thead></thead>\r\n            <tbody className=\"table-light\">\r\n              <tr>\r\n                <td className=\"success text-center\" style={{ width: \"25%\" }}>\r\n                  번호\r\n                </td>\r\n                <td className=\"board_no text-center\" style={{ width: \"25%\" }}>\r\n                  {this.state.notice_no}\r\n                </td>\r\n                <td className=\"success text-center\" style={{ width: \"25%\" }}>\r\n                  타입\r\n                </td>\r\n                <td className=\"board_type text-center\" style={{ width: \"25%\" }}>\r\n                  {this.state.notice_type}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"success text-center\" style={{ width: \"25%\" }}>\r\n                  제목\r\n                </td>\r\n                <td\r\n                  className=\"board_title text-center\"\r\n                  style={{ width: \"25%\" }}\r\n                >\r\n                  {this.state.notice_title}\r\n                </td>\r\n                <td className=\"success text-center\" style={{ width: \"25%\" }}>\r\n                  작성자\r\n                </td>\r\n                <td className=\"board_mem text-center\" style={{ width: \"25%\" }}>\r\n                  {this.state.notice_admin}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"success text-center\" style={{ width: \"25%\" }}>\r\n                  조회수\r\n                </td>\r\n                <td\r\n                  className=\"board_views text-center\"\r\n                  style={{ width: \"25%\" }}\r\n                >\r\n                  {this.state.notice_views}\r\n                </td>\r\n                <td className=\"success text-center\" style={{ width: \"25%\" }}>\r\n                  작성일\r\n                </td>\r\n                <td className=\"board_date text-center\" style={{ width: \"25%\" }}>\r\n                  {this.state.notice_date}\r\n                </td>\r\n              </tr>\r\n              <tr></tr>\r\n              <tr>\r\n                <td\r\n                  className=\"board_contents text-center\"\r\n                  colSpan=\"4\"\r\n                  height=\"200\"\r\n                  valign=\"top\"\r\n                >\r\n                  {this.state.notice_contents}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"text-right\" colspan=\"4\">\r\n                  {/* <Link to=\"/\"> */}\r\n                  <Link to=\"/ta_front/notice.html\">\r\n                    <Button\r\n                      className=\"btn btn-success\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  </Link>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n        <form\r\n          onSubmit={this.handleSubmit}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            margin: \"0 auto\",\r\n            marginTop: \"5%\",\r\n          }}\r\n        >\r\n          <input\r\n            size=\"60\"\r\n            placeholder=\"댓글을 입력하세요\"\r\n            value={this.state.input_comment}\r\n            onChange={this.handleChange}\r\n            name=\"input_comment\"\r\n            style={{ marginRight: \"5px\" }}\r\n          />\r\n          <button className=\"btn btn-success\" type=\"submit\">\r\n            작성\r\n          </button>\r\n        </form>\r\n\r\n        {/* <form onSubmit={this.handleSubmit}>\r\n                    <TextField \r\n                        required \r\n                        placeholder='댓글을 입력하세요' \r\n                        name='input_comment' \r\n                        value={this.state.input_comment}\r\n                        onChange={this.handleChange}\r\n                    ></TextField>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">입력</Button>\r\n                </form> */}\r\n\r\n        <div>\r\n          <Table\r\n            className=\"table\"\r\n            id=\"comment\"\r\n            style={{ margin: \"10px\", textAlign: \"center\" }}\r\n            hover\r\n          >\r\n            <thead className=\"table-success\">\r\n              <tr>\r\n                <th>작성자</th>\r\n                <th>내용</th>\r\n                <th>작성일</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.notice_comments.map((comment) => (\r\n                <tr className=\"data2\" key={comment.com_no}>\r\n                  <td class=\"com_mem\">{comment.com_mem.member_nickName}</td>\r\n                  <td class=\"com_contents\">{comment.com_contents}</td>\r\n                  <td class=\"com_date\">{comment.com_date}</td>\r\n                  <td class=\"com_delete\">\r\n                    {this.state.loginInfo?.member_no !== undefined &&\r\n                    comment.com_mem.member_no ===\r\n                      this.state.loginInfo?.member_no ? (\r\n                      <input\r\n                        class=\"com_delete_button btn btn-xs btn-outline-success\"\r\n                        type=\"submit\"\r\n                        value=\"삭제\"\r\n                        onClick={() => this.deleteNC(comment.com_no)}\r\n                      />\r\n                    ) : (\r\n                      <p>삭제 불가</p>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailNoticeComponent;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport NoticeListComponent from \"./component/notice/NoticeListComponent\";\r\n\r\nimport DetailNoticeComponent from \"./component/notice/DetailNoticeComponent\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Container>\r\n            <Switch>\r\n              <Route\r\n                exact\r\n                path=\"/ta_front/notice.html\"\r\n                component={NoticeListComponent}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/ta_front/notice/\"\r\n                component={DetailNoticeComponent}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/ta_front/notice/:no\"\r\n                component={DetailNoticeComponent}\r\n              />\r\n\r\n              {/* <Route path=\"/ta_front/notice.html\">\r\n                <NoticeListComponent />\r\n              </Route>\r\n              <Route path=\"/ta_front/notice/:no\">\r\n                <DetailNoticeComponent />\r\n              </Route>\r\n              <Route path=\"/ta_front/notice/write\">\r\n                <AddNoticeComponent />\r\n              </Route>\r\n              <Route path=\"/ta_front/notice/modify\">\r\n                <EditNoticeComponent />\r\n              </Route> */}\r\n              {/* <Route exact path=\"/\" component={NoticeListComponent} />\r\n              <Route exact path=\"/notices/\" component={DetailNoticeComponent} />\r\n              <Route exact path=\"/notices/:no\" component={DetailNoticeComponent} />\r\n              <Route exact path=\"/add-notice\" component={AddNoticeComponent} />\r\n              <Route exact path=\"/edit-notice\" component={EditNoticeComponent} /> */}\r\n            </Switch>\r\n          </Container>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}