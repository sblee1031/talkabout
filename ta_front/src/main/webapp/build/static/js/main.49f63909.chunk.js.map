{"version":3,"sources":["component/Header.js","component/DebateList.js","component/Datepick.js","component/DebWrite.js","component/DebateSearch.js","component/DebateView.js","App.js","index.js"],"names":["Header","useState","word","setWord","className","style","marginTop","textDecoration","color","to","textAlign","marginRight","display","fontSize","width","margin","placeholder","onChange","e","target","value","Button","marginBottom","variant","onClick","preventDefault","alert","DebateList","list","setList","url","useEffect","fetch","method","then","res","json","data","textDecorationColor","Table","responsive","hover","debatelist","map","debate","debate_no","debate_topic","debate_writer","member_nickName","debate_date","debate_time","debate_status","status","Datepick","props","startDate","setStartDate","currentDate","Date","selected","date","setDate","showTimeSelect","minDate","filterTime","time","selectedDate","getHours","dateFormat","DebWrite","discuss1","setDiscuss1","discuss2","setDiscuss2","editData","setEditData","setCkeditor","debateDate","setDebateDate","debateTime","setDebateTime","onSubmit","Event","console","log","Debate","debate_content","headers","body","JSON","stringify","year","getFullYear","toString","month","getMonth","day","getDate","hour","Number","parseInt","minites","getMinutes","getCurrentDate","id","name","vlaue","maxHeight","overflow","editor","ClassicEditor","onReady","event","getData","size","type","DebateSearch","useParams","DebateView","content","setContent","no","response","detail","discuss","readOnly","isReadOnly","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49f63909.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Header() {\r\n  const [word, setWord] = useState(\"\");\r\n  const search = (e) => {\r\n    setWord(e.target.value);\r\n  };\r\n  const btnsearch = (e) => {\r\n    if (word) {\r\n      // console.log(word);\r\n    } else {\r\n      e.preventDefault();\r\n      alert(\"검색어를 입력해주세요\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"header\" style={{ marginTop: \"10px\" }}>\r\n      <Link\r\n        style={{ textDecoration: \"none\", color: \"black\" }}\r\n        to={`/ta_front/debrecruit.html`}\r\n      >\r\n        <h1>토론 모집</h1>\r\n      </Link>\r\n      <div\r\n        style={{\r\n          textAlign: \"right\",\r\n          marginRight: \"10px\",\r\n          display: \"block\",\r\n        }}\r\n      >\r\n        <label style={{ fontSize: \"15pt\" }}>\r\n          검색\r\n          <input\r\n            className=\"word\"\r\n            style={{ width: \"300px\", margin: \"10px\" }}\r\n            placeholder=\"제목&내용을 입력해주세요.\"\r\n            onChange={search}\r\n          ></input>\r\n        </label>\r\n        <Link to={`/ta_front/debrecruit/search/${word}`}>\r\n          <Button\r\n            style={{ marginBottom: \"10px\" }}\r\n            className=\"buttons\"\r\n            variant=\"success\"\r\n            onClick={btnsearch}\r\n          >\r\n            검색\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function DebateList() {\r\n  const [list, setList] = useState({});\r\n  const pageNo = 1;\r\n  const pageSize = 5;\r\n  //const [status, setStatus] = useState();\r\n  const url = `http://localhost:9999/ta_back/debrecruit/list?start=${pageNo}&end=${pageSize}`;\r\n  useEffect(() => {\r\n    fetch(url, {\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(\"--->\", data);\r\n        setList(data);\r\n      });\r\n  }, [url]);\r\n\r\n  //console.log(\"---->\", list);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"divButton\" style={{ textAlign: \"right\", margin: \"10px\" }}>\r\n        <Link\r\n          className=\"write\"\r\n          style={{ textDecoration: \"none\", textDecorationColor: \"black\" }}\r\n          to={\"/ta_front/debrecruit/write\"}\r\n        >\r\n          <Button className=\"buttons\" variant=\"success\">\r\n            토론 작성\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <Table responsive=\"xl\" hover>\r\n        <thead>\r\n          <tr style={{ fontSize: \"14pt\" }}>\r\n            <th style={{ width: \"10%\" }}>토론번호</th>\r\n            <th style={{ width: \"25%\" }}>토론제목</th>\r\n            <th style={{ width: \"10%\" }}>작성자</th>\r\n            <th style={{ width: \"15%\" }}>작성시간</th>\r\n            <th style={{ width: \"10%\" }}>토론시간</th>\r\n            <th style={{ width: \"10%\" }}>진행상태</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.debatelist?.map((debate) => (\r\n            <tr key={debate.debate_no}>\r\n              <td>{debate.debate_no}</td>\r\n              <td>\r\n                <Link to={`/ta_front/debrecruit/${debate.debate_no}`}>\r\n                  {debate.debate_topic}\r\n                </Link>\r\n              </td>\r\n              <td>{debate.debate_writer.member_nickName}</td>\r\n              <td>{debate.debate_date}</td>\r\n              <td>{debate.debate_time}</td>\r\n              <td>{debate.debate_status}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n\r\n      <Button variant=\"success\">\r\n        status : {list.status ? list.status : \"로딩\"}\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nconst Datepick = (props) => {\r\n  const [startDate, setStartDate] = useState();\r\n  //console.log(\"선택일 : \", startDate);\r\n  const ocDatePicker = (date) => {\r\n    setStartDate(date);\r\n    props.setDate(date);\r\n    // props.date = startDate;\r\n  };\r\n  const filterPassedTime = (time) => {\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(time);\r\n    // console.log(currentDate.getHours() + 1);\r\n    return currentDate.getHours() + 1 < selectedDate.getHours();\r\n  };\r\n  const currentDate = new Date();\r\n  return (\r\n    <DatePicker\r\n      selected={startDate}\r\n      onChange={ocDatePicker}\r\n      showTimeSelect\r\n      minDate={currentDate}\r\n      filterTime={filterPassedTime}\r\n      //minTime={setHours(setMinutes(new Date(), 0), 17)}\r\n      dateFormat=\"yyyy/MM/dd/ h:mm aa\"\r\n      //showDisabledMonthNavigation\r\n    >\r\n      <div style={{ color: \"green\", fontSize: \"15pt\" }}>\r\n        토론 가능 시간 선택\r\n      </div>\r\n    </DatePicker>\r\n  );\r\n};\r\n\r\nexport default Datepick;\r\n","import { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport React, { useState } from \"react\";\r\nimport Datepick from \"./Datepick\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default function DebWrite() {\r\n  const [discuss1, setDiscuss1] = useState(\"\");\r\n  const [discuss2, setDiscuss2] = useState(\"\");\r\n  const [editData, setEditData] = useState(\"\");\r\n  const [ckeditor, setCkeditor] = useState({}); //ckeditor 객체\r\n  const [debateDate, setDebateDate] = useState(\"\");\r\n  const [debateTime, setDebateTime] = useState(\"30\");\r\n  const ocDiscuss1 = (e) => {\r\n    setDiscuss1(e.target.value);\r\n  };\r\n  const ocDiscuss2 = (e) => {\r\n    setDiscuss2(e.target.value);\r\n  };\r\n  const debWrite = (Event) => {\r\n    Event.preventDefault();\r\n    //console.log(Event.target);\r\n    console.log(discuss1, \" / \", discuss2);\r\n    console.log(\"에디터->\", editData);\r\n    if (\r\n      debateDate === \"\" ||\r\n      editData === \"\" ||\r\n      discuss1 === \"\" ||\r\n      discuss2 === \"\"\r\n    ) {\r\n      alert(\"모두 입력해주세요\");\r\n    } else {\r\n      const Debate = {\r\n        //debate_no: 1,\r\n        debate_content: editData,\r\n        debate_topic: discuss1 + \" VS \" + discuss2,\r\n        discuss1: discuss1,\r\n        discuss2: discuss2,\r\n        debateDate: debateDate,\r\n        debateTime: debateTime,\r\n      };\r\n      // const detail = { discuss: discuss1 };\r\n      //const data = { Debate, detail };\r\n      //console.log(data);\r\n\r\n      const url = `http://localhost:9999/ta_back/debrecruit/write`;\r\n      fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(Debate),\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"--->\", data);\r\n          <Redirect to=\"/ta_front/debrecruit.html\" />;\r\n        });\r\n    }\r\n  };\r\n  const changeEditor = (event, editor) => {\r\n    const data = editor.getData();\r\n    setEditData(data);\r\n    //onsole.log(ckeditor);\r\n    //console.log({ event, editor, data });\r\n  };\r\n  function getCurrentDate(date) {\r\n    //현재시간 구하는 함수\r\n    var date = new Date();\r\n    var year = date.getFullYear().toString();\r\n    var month = date.getMonth() + 1;\r\n    month = month < 10 ? \"0\" + month.toString() : month.toString();\r\n    var day = date.getDate();\r\n    day = day < 10 ? \"0\" + day.toString() : day.toString();\r\n    var hour = date.getHours();\r\n    hour = hour < 10 ? \"0\" + hour.toString() : hour.toString();\r\n    if (Number.parseInt(hour) + 1 === 24) {\r\n      hour = \"00\";\r\n    }\r\n    var minites = date.getMinutes();\r\n    minites = minites < 10 ? \"0\" + minites.toString() : minites.toString();\r\n\r\n    return year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minites + \":00\"; // 현재시간보다 1시간 추가 ,최소 시작시간은 한시간 뒤부터 가능.\r\n  }\r\n  const ocDebateDate = (e) => {\r\n    //  console.log(getCurrentDate(e));\r\n    //const year = e.getYears\r\n    setDebateDate(getCurrentDate(e));\r\n    // console.log(debateDate);\r\n  };\r\n  const ocDebateTime = (e) => {\r\n    setDebateTime(e.target.value);\r\n    //console.log(debateTime);\r\n  };\r\n  // function click() {\r\n  //   console.log(debateDate, \"/\", debateTime);\r\n  // }\r\n  return (\r\n    <>\r\n      {/* https://www.youtube.com/watch?v=_-vCsD7jHh4 */}\r\n      {/* <button onClick={click}>버튼</button> */}\r\n      <div className=\"writeView\">\r\n        <form onSubmit={debWrite}>\r\n          <div className=\"debDate\" style={{ fontSize: \"10pt\" }}>\r\n            <label className=\"labelDebDate\">\r\n              토론일자\r\n              {/* <input\r\n                type=\"datetime-local\"\r\n                id=\"inputDebate_date\"\r\n                onChange={ocDebateDate}\r\n                value={debateDate}\r\n              /> */}\r\n              <Datepick setDate={ocDebateDate} />\r\n            </label>\r\n            <label className=\"labelDebDate\">\r\n              토론제한시간\r\n              <br />\r\n              <select\r\n                id=\"selectDebate_time\"\r\n                name=\"selectDebate_time\"\r\n                onChange={ocDebateTime}\r\n                value={debateTime}\r\n              >\r\n                <option value=\"30\">30분</option>\r\n                <option value=\"60\">60분</option>\r\n                <option value=\"120\">120분</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n          <div className=\"divDiscuss\">\r\n            <label className=\"labelDiscuss\">\r\n              주장 1 <br />\r\n              <input\r\n                className=\"inputDiscuss1\"\r\n                name=\"discuss1\"\r\n                onChange={ocDiscuss1}\r\n                vlaue={discuss1}\r\n              ></input>\r\n            </label>\r\n            <label className=\"vs\"> VS </label>\r\n            <label className=\"labelDiscuss\">\r\n              주장 2 <br />\r\n              <input\r\n                className=\"inputDiscuss2\"\r\n                name=\"discuss2\"\r\n                onChange={ocDiscuss2}\r\n                vlaue={discuss2}\r\n              ></input>\r\n            </label>\r\n          </div>\r\n          <div\r\n            className=\"divEditor\"\r\n            style={{ maxHeight: \"630px\", overflow: \"auto\" }}\r\n          >\r\n            <CKEditor\r\n              editor={ClassicEditor}\r\n              data=\"<p>내용을 입력해주세요!</p>\"\r\n              onReady={(editor) => {\r\n                setCkeditor(editor);\r\n                //editor.isReadOnly = { readOnly };\r\n                // You can store the \"editor\" and use when it is needed.\r\n                //console.log(\"Editor is ready to use!\", editor);\r\n              }}\r\n              onChange={changeEditor}\r\n              // onBlur={(event, editor) => {\r\n              //   console.log(\"Blur.\", editor);\r\n              // }}\r\n              // onFocus={(event, editor) => {\r\n              //   console.log(\"Focus.\", editor);\r\n              // }}\r\n            />\r\n          </div>\r\n          <div className=\"divWriteButton\" style={{ textAlign: \"right\" }}>\r\n            <Button\r\n              className=\"buttonWrite\"\r\n              variant=\"outline-success\"\r\n              size=\"sm\"\r\n              style={{ margin: \"10px\" }}\r\n              type=\"submit\"\r\n            >\r\n              작성하기\r\n            </Button>\r\n            <Link to=\"/ta_front/debrecruit.html\">\r\n              <Button\r\n                className=\"buttonBack\"\r\n                variant=\"outline-success\"\r\n                size=\"sm\"\r\n                style={{ margin: \"10px\" }}\r\n              >\r\n                돌아가기\r\n              </Button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function DebateSearch() {\r\n  const { word } = useParams();\r\n  console.log(\"-->\", { word });\r\n  const [list, setList] = useState({});\r\n  //const [status, setStatus] = useState();\r\n  const url = `http://localhost:9999/ta_back/debrecruit/list/${word}`;\r\n  //console.log(\"url : \", url);\r\n  useEffect(() => {\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"--->\", data);\r\n\r\n        setList(data);\r\n      });\r\n  }, [url]);\r\n\r\n  //console.log(\"---->\", list);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"divButton\" style={{ textAlign: \"right\", margin: \"10px\" }}>\r\n        <Link\r\n          className=\"write\"\r\n          style={{ textDecoration: \"none\", textDecorationColor: \"black\" }}\r\n          to={\"/ta_front/debrecruit/write\"}\r\n        >\r\n          <Button className=\"buttons\" variant=\"success\">\r\n            토론 작성\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <Table responsive=\"xl\" hover>\r\n        <thead>\r\n          <tr style={{ fontSize: \"14pt\" }}>\r\n            <th style={{ width: \"10%\" }}>토론번호</th>\r\n            <th style={{ width: \"25%\" }}>토론제목</th>\r\n            <th style={{ width: \"10%\" }}>작성자</th>\r\n            <th style={{ width: \"15%\" }}>작성시간</th>\r\n            <th style={{ width: \"10%\" }}>토론시간</th>\r\n            <th style={{ width: \"10%\" }}>진행상태</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.debatelist?.map((debate) => (\r\n            <tr key={debate.debate_no}>\r\n              <td>{debate.debate_no}</td>\r\n              <td>\r\n                <Link to={`/ta_front/debrecruit/${debate.debate_no}`}>\r\n                  {debate.debate_topic}\r\n                </Link>\r\n              </td>\r\n              <td>{debate.debate_writer.member_nickName}</td>\r\n              <td>{debate.debate_date}</td>\r\n              <td>{debate.debate_time}</td>\r\n              <td>{debate.debate_status}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n\r\n      <Button variant=\"success\">\r\n        status : {list.status ? list.status : \"로딩\"}\r\n      </Button>\r\n    </>\r\n  );\r\n}\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function DebateView() {\r\n  // const [list, setList] = useState({});\r\n  const [ckeditor, setCkeditor] = useState({}); //ckeditor 객체\r\n  const [discuss1, setDiscuss1] = useState(\"\"); //ckeditor 객체\r\n  const [discuss2, setDiscuss2] = useState(\"\"); //ckeditor 객체\r\n  const [content, setContent] = useState(\"내용\"); //ckeditor 객체\r\n  const { no } = useParams();\r\n  const url = `http://localhost:9999/ta_back/debrecruit/${no}`;\r\n  //console.log(\"url : \", url);\r\n  useEffect(() => {\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((response) => {\r\n        // console.log(\"뷰-->\", response);\r\n        //setList(response);\r\n        setDiscuss1(response.debate.detail[0].discuss);\r\n        setDiscuss2(response.debate.detail[1].discuss);\r\n        setContent(response.debate.debate.debate_content);\r\n      });\r\n  }, [url]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"writeView\">\r\n        <div className=\"divDiscuss\">\r\n          <label className=\"labelDiscuss\">\r\n            주장 1 <br />\r\n            <input\r\n              className=\"inputDiscuss1\"\r\n              name=\"discuss1\"\r\n              value={discuss1}\r\n              readOnly\r\n            ></input>\r\n          </label>\r\n          <label className=\"vs\"> VS </label>\r\n          <label className=\"labelDiscuss\">\r\n            주장 2 <br />\r\n            <input\r\n              className=\"inputDiscuss2\"\r\n              name=\"discuss2\"\r\n              value={discuss2}\r\n              readOnly\r\n            ></input>\r\n          </label>\r\n        </div>\r\n        <div\r\n          className=\"divEditor\"\r\n          style={{ maxHeight: \"630px\", overflow: \"auto\" }}\r\n        >\r\n          <CKEditor\r\n            editor={ClassicEditor}\r\n            data={content}\r\n            onReady={(editor) => {\r\n              editor.isReadOnly = true;\r\n              setCkeditor(editor);\r\n              //editor.isReadOnly = { readOnly };\r\n              // You can store the \"editor\" and use when it is needed.\r\n              //console.log(\"Editor is ready to use!\", editor);\r\n            }}\r\n            // onChange={changeEditor}\r\n            // onBlur={(event, editor) => {\r\n            //   console.log(\"Blur.\", editor);\r\n            // }}\r\n            // onFocus={(event, editor) => {\r\n            //   console.log(\"Focus.\", editor);\r\n            // }}\r\n          />\r\n        </div>\r\n        <div className=\"divWriteButton\" style={{ textAlign: \"right\" }}>\r\n          <Button\r\n            className=\"buttonWrite\"\r\n            variant=\"outline-success\"\r\n            size=\"sm\"\r\n            style={{ margin: \"10px\" }}\r\n            type=\"submit\"\r\n          >\r\n            작성하기\r\n          </Button>\r\n          <Link to=\"/ta_front/debrecruit.html\">\r\n            <Button\r\n              className=\"buttonBack\"\r\n              variant=\"outline-success\"\r\n              size=\"sm\"\r\n              style={{ margin: \"10px\" }}\r\n            >\r\n              돌아가기\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Header from \"./component/Header\";\nimport DebateList from \"./component/DebateList\";\nimport \"react-bootstrap\";\nimport DebWrite from \"./component/DebWrite\";\nimport DebateSearch from \"./component/DebateSearch\";\nimport DebateView from \"./component/DebateView\";\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route path=\"/ta_front/debrecruit.html\">\n            <DebateList />\n          </Route>\n          <Route path=\"/ta_front/debrecruit/search/:word\">\n            <DebateSearch />\n          </Route>\n          <Route path=\"/ta_front/debrecruit/write\">\n            <DebWrite />\n          </Route>\n          <Route path=\"/ta_front/debrecruit/:no\">\n            <DebateView />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}