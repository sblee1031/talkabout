{"version":3,"sources":["component/Header.js","component/pagination/Paging.js","component/DebateList.js","component/Datepick.js","component/DebWrite.js","component/DebateSearch.js","component/DebateView.js","App.js","index.js"],"names":["Header","className","style","marginTop","textDecoration","color","href","Paging","page","count","setPage","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","prevPageText","nextPageText","onChange","DebateList","useState","list","setList","setCount","word","setWord","url","setUrl","setPage1","listUrl","searchUrl","useEffect","fetch","method","then","res","json","data","lastRow","textAlign","marginRight","display","fontSize","fontWeight","width","margin","placeholder","e","target","value","Button","marginBottom","variant","onClick","preventDefault","alert","textDecorationColor","to","Table","responsive","hover","debatelist","map","debate","debate_no","debate_topic","debate_writer","member_nickName","debate_date","debate_time","debate_status","Datepick","props","startDate","setStartDate","currentDate","Date","selected","date","setDate","showTimeSelect","minDate","filterTime","time","selectedDate","getDate","getHours","dateFormat","DebWrite","discuss1","setDiscuss1","discuss2","setDiscuss2","editData","setEditData","setCkeditor","debateDate","setDebateDate","debateTime","setDebateTime","history","useHistory","onSubmit","Event","console","log","Debate","debate_content","headers","body","JSON","stringify","push","year","getFullYear","toString","month","getMonth","day","hour","Number","parseInt","minites","getMinutes","getCurrentDate","id","name","vlaue","maxHeight","editor","ClassicEditor","onReady","event","getData","size","type","DebateSearch","useParams","DebateView","content","setContent","writeDate","setWriteDate","debDate","setDebDate","debTime","setDebTime","debWriter","setDebWriter","thumnail","setThumnail","no","response","member_thumb","debate_startDate","detail","discuss","src","height","marginLeft","alt","readOnly","overflow","isReadOnly","App","Container","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cd55433.chunk.js","sourcesContent":["import { Link, Redirect } from \"react-router-dom\";\r\nexport default function Header() {\r\n  //const redirect = window.location.replace(\"/\");\r\n  return (\r\n    <div className=\"header\" style={{ marginTop: \"10px\" }}>\r\n      <a\r\n        style={{ textDecoration: \"none\", color: \"black\" }}\r\n        href={\"/ta_front/debrecruit.html\"}\r\n      >\r\n        <h1>토론 모집</h1>\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Paging.css\";\r\nimport Pagination from \"react-js-pagination\";\r\nconst Paging = ({ page, count, setPage }) => {\r\n  return (\r\n    <Pagination\r\n      activePage={page}\r\n      itemsCountPerPage={5}\r\n      totalItemsCount={count}\r\n      pageRangeDisplayed={5}\r\n      prevPageText={\"‹\"}\r\n      nextPageText={\"›\"}\r\n      onChange={setPage}\r\n    />\r\n  );\r\n};\r\nexport default Paging;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Paging from \"./pagination/Paging\";\r\n\r\nexport default function DebateList() {\r\n  const [list, setList] = useState({});\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(1);\r\n  const pageSize = 5;\r\n\r\n  //const pageNo = page;\r\n  //console.log(pageNo);\r\n  const [word, setWord] = useState();\r\n  const [url, setUrl] = useState(\r\n    `http://localhost:9999/ta_back/debrecruit/list?pageNo=${page}&pageSize=${pageSize}`\r\n  );\r\n  const search = (e) => {\r\n    setWord(e.target.value);\r\n  };\r\n  const btnsearch = (e) => {\r\n    //const searchUrl = `http://localhost:9999/ta_back/debrecruit/list/${word}?pageNo=${page}&pageSize=${pageSize}`;\r\n    if (word) {\r\n      setPage1(1);\r\n      //setUrl(url);\r\n    } else {\r\n      e.preventDefault();\r\n      alert(\"검색어를 입력해주세요\");\r\n    }\r\n  };\r\n  function setPage1(page) {\r\n    const listUrl = `http://localhost:9999/ta_back/debrecruit/list?pageNo=${page}&pageSize=${pageSize}`;\r\n    const searchUrl = `http://localhost:9999/ta_back/debrecruit/list/${word}?pageNo=${page}&pageSize=${pageSize}`;\r\n    // console.log(url);\r\n    // console.log(page);\r\n    if (word) {\r\n      setUrl(searchUrl);\r\n      setPage(page);\r\n    } else {\r\n      setUrl(listUrl);\r\n      setPage(page);\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    fetch(url, {\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        // console.log(\"--->\", data);\r\n        setList(data);\r\n        setCount(data.lastRow);\r\n      });\r\n  }, [url]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          textAlign: \"right\",\r\n          marginRight: \"10px\",\r\n          display: \"block\",\r\n        }}\r\n      >\r\n        <label style={{ fontSize: \"15pt\", fontWeight: \"600\" }}>\r\n          검색\r\n          <input\r\n            className=\"word\"\r\n            style={{ width: \"300px\", margin: \"10px\", fontSize: \"14pt\" }}\r\n            placeholder=\"제목&내용을 입력해주세요.\"\r\n            onChange={search}\r\n          ></input>\r\n        </label>\r\n\r\n        <Button\r\n          style={{ marginBottom: \"10px\" }}\r\n          className=\"buttons\"\r\n          variant=\"success\"\r\n          onClick={btnsearch}\r\n        >\r\n          검색\r\n        </Button>\r\n      </div>\r\n      <div className=\"divButton\" style={{ textAlign: \"right\", margin: \"10px\" }}>\r\n        <Link\r\n          className=\"write\"\r\n          style={{ textDecoration: \"none\", textDecorationColor: \"black\" }}\r\n          to={\"/ta_front/debrecruit/write\"}\r\n        >\r\n          <Button className=\"buttons\" variant=\"success\">\r\n            토론 작성\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <Table responsive=\"xl\" hover>\r\n        <thead>\r\n          <tr style={{ fontSize: \"14pt\" }}>\r\n            <th style={{ width: \"10%\" }}>토론번호</th>\r\n            <th style={{ width: \"25%\" }}>토론제목</th>\r\n            <th style={{ width: \"10%\" }}>작성자</th>\r\n            <th style={{ width: \"15%\" }}>작성시간</th>\r\n            <th style={{ width: \"10%\" }}>토론시간</th>\r\n            <th style={{ width: \"10%\" }}>진행상태</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.debatelist?.map((debate) => (\r\n            <tr key={debate.debate_no}>\r\n              <td>{debate.debate_no}</td>\r\n              <td>\r\n                <Link to={`/ta_front/debrecruit/${debate.debate_no}`}>\r\n                  {debate.debate_topic}\r\n                </Link>\r\n              </td>\r\n              <td>{debate.debate_writer.member_nickName}</td>\r\n              <td>{debate.debate_date}</td>\r\n              <td>{debate.debate_time}</td>\r\n              <td>{debate.debate_status}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      <div className=\"paging\">\r\n        <Paging page={page} count={count} setPage={setPage1} />\r\n      </div>\r\n      {/* <Button variant=\"success\">\r\n        status : {list.status ? list.status : \"로딩\"}\r\n      </Button> */}\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nconst Datepick = (props) => {\r\n  const [startDate, setStartDate] = useState();\r\n\r\n  const date = () => {\r\n    setStartDate(props.setDate(date));\r\n  };\r\n  //console.log(\"선택일 : \", startDate);\r\n  const ocDatePicker = (date) => {\r\n    setStartDate(date);\r\n    props.setDate(date);\r\n    // props.date = startDate;\r\n  };\r\n  const filterPassedTime = (time) => {\r\n    //console.log(time.getDate());\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(time);\r\n    // console.log(currentDate.getHours() + 1);\r\n    if (currentDate.getDate() < selectedDate.getDate()) {\r\n      //console.log(selectedDate.getHours());\r\n      return currentDate.getHours();\r\n    } else {\r\n      return currentDate.getHours() + 1 < selectedDate.getHours();\r\n    }\r\n  };\r\n  const currentDate = new Date();\r\n  return (\r\n    <DatePicker\r\n      selected={startDate}\r\n      onChange={ocDatePicker}\r\n      showTimeSelect\r\n      minDate={currentDate}\r\n      filterTime={filterPassedTime}\r\n      //minTime={setHours(setMinutes(new Date(), 0), 17)}\r\n      dateFormat=\"yyyy/MM/dd/ h:mm aa\"\r\n    >\r\n      <div style={{ color: \"green\", fontSize: \"15pt\" }}>\r\n        토론 가능 시간 선택\r\n      </div>\r\n    </DatePicker>\r\n  );\r\n};\r\n\r\nexport default Datepick;\r\n","import { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport React, { useState } from \"react\";\r\nimport Datepick from \"./Datepick\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default function DebWrite(props) {\r\n  const [discuss1, setDiscuss1] = useState(\"\");\r\n  const [discuss2, setDiscuss2] = useState(\"\");\r\n  const [editData, setEditData] = useState(\"\");\r\n  const [ckeditor, setCkeditor] = useState({}); //ckeditor 객체\r\n  const [debateDate, setDebateDate] = useState(\"\");\r\n  const [debateTime, setDebateTime] = useState(\"30\");\r\n  const history = useHistory();\r\n  const ocDiscuss1 = (e) => {\r\n    setDiscuss1(e.target.value);\r\n  };\r\n  const ocDiscuss2 = (e) => {\r\n    setDiscuss2(e.target.value);\r\n  };\r\n  const debWrite = (Event) => {\r\n    Event.preventDefault();\r\n    //console.log(Event.target);\r\n    console.log(discuss1, \" / \", discuss2);\r\n    console.log(\"에디터->\", editData);\r\n    if (\r\n      debateDate === \"\" ||\r\n      editData === \"\" ||\r\n      discuss1 === \"\" ||\r\n      discuss2 === \"\"\r\n    ) {\r\n      alert(\"모두 입력해주세요\");\r\n    } else {\r\n      const Debate = {\r\n        //debate_no: 1,\r\n        debate_content: editData,\r\n        debate_topic: discuss1 + \" VS \" + discuss2,\r\n        discuss1: discuss1,\r\n        discuss2: discuss2,\r\n        debateDate: debateDate,\r\n        debateTime: debateTime,\r\n      };\r\n      // const detail = { discuss: discuss1 };\r\n      //const data = { Debate, detail };\r\n      //console.log(data);\r\n\r\n      const url = `http://localhost:9999/ta_back/debrecruit/write`;\r\n      fetch(url, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(Debate),\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(\"결과->\", data);\r\n          history.push(\"/ta_front/debrecruit.html\");\r\n        });\r\n    }\r\n  };\r\n  const changeEditor = (event, editor) => {\r\n    const data = editor.getData();\r\n    setEditData(data);\r\n    console.log(data);\r\n    //console.log({ event, editor, data });\r\n  };\r\n  function getCurrentDate() {\r\n    //현재시간 구하는 함수\r\n    var date = new Date();\r\n    var year = date.getFullYear().toString();\r\n    var month = date.getMonth() + 1;\r\n    month = month < 10 ? \"0\" + month.toString() : month.toString();\r\n    var day = date.getDate();\r\n    day = day < 10 ? \"0\" + day.toString() : day.toString();\r\n    var hour = date.getHours();\r\n    hour = hour < 10 ? \"0\" + hour.toString() : hour.toString();\r\n    if (Number.parseInt(hour) + 1 === 24) {\r\n      hour = \"00\";\r\n    }\r\n    var minites = date.getMinutes();\r\n    minites = minites < 10 ? \"0\" + minites.toString() : minites.toString();\r\n\r\n    return year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minites + \":00\"; // 현재시간보다 1시간 추가 ,최소 시작시간은 한시간 뒤부터 가능.\r\n  }\r\n  const ocDebateDate = (e) => {\r\n    //  console.log(getCurrentDate(e));\r\n    //const year = e.getYears\r\n    setDebateDate(getCurrentDate(e));\r\n    // console.log(debateDate);\r\n  };\r\n  const ocDebateTime = (e) => {\r\n    setDebateTime(e.target.value);\r\n    //console.log(debateTime);\r\n  };\r\n  // function click() {\r\n  //   console.log(debateDate, \"/\", debateTime);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {/* https://www.youtube.com/watch?v=_-vCsD7jHh4 */}\r\n      {/* <button onClick={click}>버튼</button> */}\r\n\r\n      <div className=\"writeView\">\r\n        <form onSubmit={debWrite}>\r\n          <div className=\"debDate\" style={{ fontSize: \"10pt\" }}>\r\n            <label className=\"labelDebDate\">\r\n              토론일자\r\n              {/* <input\r\n                type=\"datetime-local\"\r\n                id=\"inputDebate_date\"\r\n                onChange={ocDebateDate}\r\n                value={debateDate}\r\n              /> */}\r\n              <Datepick setDate={ocDebateDate} />\r\n            </label>\r\n            <label className=\"labelDebDate\">\r\n              토론제한시간\r\n              <br />\r\n              <select\r\n                id=\"selectDebate_time\"\r\n                name=\"selectDebate_time\"\r\n                onChange={ocDebateTime}\r\n                value={debateTime}\r\n              >\r\n                <option value=\"30\">30분</option>\r\n                <option value=\"60\">60분</option>\r\n                <option value=\"120\">120분</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n          <div className=\"divDiscuss\" style={{ width: \"100%\" }}>\r\n            <label className=\"labelDiscuss\">\r\n              주장 1 <br />\r\n              <input\r\n                className=\"inputDiscuss1\"\r\n                name=\"discuss1\"\r\n                style={{ width: \"100%\" }}\r\n                onChange={ocDiscuss1}\r\n                vlaue={discuss1}\r\n              ></input>\r\n            </label>\r\n            <label className=\"vs\"> VS </label>\r\n            <label className=\"labelDiscuss\">\r\n              주장 2 <br />\r\n              <input\r\n                className=\"inputDiscuss2\"\r\n                name=\"discuss2\"\r\n                style={{ width: \"100%\" }}\r\n                onChange={ocDiscuss2}\r\n                vlaue={discuss2}\r\n              ></input>\r\n            </label>\r\n          </div>\r\n          <div className=\"divEditor\" style={{ maxHeight: \"630px\" }}>\r\n            <CKEditor\r\n              editor={ClassicEditor}\r\n              data=\"<p>내용을 입력해주세요!</p>\"\r\n              onReady={(editor) => {\r\n                setCkeditor(editor);\r\n                //editor.isReadOnly = { readOnly };\r\n                // You can store the \"editor\" and use when it is needed.\r\n                //console.log(\"Editor is ready to use!\", editor);\r\n              }}\r\n              onChange={changeEditor}\r\n              // onBlur={(event, editor) => {\r\n              //   console.log(\"Blur.\", editor);\r\n              // }}\r\n              // onFocus={(event, editor) => {\r\n              //   console.log(\"Focus.\", editor);\r\n              // }}\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"divWriteButton\"\r\n            style={{ textAlign: \"right\", display: \"inline-block\" }}\r\n          >\r\n            <Button\r\n              className=\"buttonWrite\"\r\n              variant=\"outline-success\"\r\n              size=\"sm\"\r\n              style={{ margin: \"10px\" }}\r\n              type=\"submit\"\r\n            >\r\n              작성하기\r\n            </Button>\r\n            <Link to=\"/ta_front/debrecruit.html\">\r\n              <Button\r\n                className=\"buttonBack\"\r\n                variant=\"outline-success\"\r\n                size=\"sm\"\r\n                style={{ margin: \"10px\" }}\r\n              >\r\n                돌아가기\r\n              </Button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function DebateSearch() {\r\n  const { word } = useParams();\r\n  console.log(\"-->\", { word });\r\n  const [list, setList] = useState({});\r\n  //const [status, setStatus] = useState();\r\n  const pageNo = 1;\r\n  const pageSize = 5;\r\n  const url = `http://localhost:9999/ta_back/debrecruit/list/${word}?start=${pageNo}&end=${pageSize}`;\r\n  //console.log(\"url : \", url);\r\n  useEffect(() => {\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"--->\", data);\r\n\r\n        setList(data);\r\n      });\r\n  }, [url]);\r\n\r\n  //console.log(\"---->\", list);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"divButton\" style={{ textAlign: \"right\", margin: \"10px\" }}>\r\n        <Link\r\n          className=\"write\"\r\n          style={{ textDecoration: \"none\", textDecorationColor: \"black\" }}\r\n          to={\"/ta_front/debrecruit/write\"}\r\n        >\r\n          <Button className=\"buttons\" variant=\"success\">\r\n            토론 작성\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <Table responsive=\"xl\" hover>\r\n        <thead>\r\n          <tr style={{ fontSize: \"14pt\" }}>\r\n            <th style={{ width: \"10%\" }}>토론번호</th>\r\n            <th style={{ width: \"25%\" }}>토론제목</th>\r\n            <th style={{ width: \"10%\" }}>작성자</th>\r\n            <th style={{ width: \"15%\" }}>작성시간</th>\r\n            <th style={{ width: \"10%\" }}>토론시간</th>\r\n            <th style={{ width: \"10%\" }}>진행상태</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {list.debatelist?.map((debate) => (\r\n            <tr key={debate.debate_no}>\r\n              <td>{debate.debate_no}</td>\r\n              <td>\r\n                <Link to={`/ta_front/debrecruit/${debate.debate_no}`}>\r\n                  {debate.debate_topic}\r\n                </Link>\r\n              </td>\r\n              <td>{debate.debate_writer.member_nickName}</td>\r\n              <td>{debate.debate_date}</td>\r\n              <td>{debate.debate_time}</td>\r\n              <td>{debate.debate_status}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n}\r\n","import { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Datepick from \"./Datepick\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default function DebateView() {\r\n  // const [list, setList] = useState({});\r\n  const [ckeditor, setCkeditor] = useState({}); //ckeditor 객체\r\n  const [discuss1, setDiscuss1] = useState(\"\"); //ckeditor 객체\r\n  const [discuss2, setDiscuss2] = useState(\"\"); //ckeditor 객체\r\n  const [content, setContent] = useState(\"내용\"); //ckeditor 객체\r\n  const [writeDate, setWriteDate] = useState(\"\"); //ckeditor 객체\r\n  const [debDate, setDebDate] = useState(\"\"); //ckeditor 객체\r\n  const [debTime, setDebTime] = useState(\"\"); //ckeditor 객체\r\n  const [debWriter, setDebWriter] = useState(\"\"); //ckeditor 객체\r\n  const [thumnail, setThumnail] = useState(\"\"); //ckeditor 객체\r\n  const { no } = useParams();\r\n  const url = `http://localhost:9999/ta_back/debrecruit/${no}`;\r\n  //console.log(\"url : \", url);\r\n  useEffect(() => {\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((response) => {\r\n        console.log(\"뷰-->\", response);\r\n        //setList(response);\r\n        setThumnail(response.debate.debate.debate_writer.member_thumb);\r\n        setDebDate(response.debate.debate.debate_startDate);\r\n        setDebWriter(response.debate.debate.debate_writer.member_nickName);\r\n        setDebTime(response.debate.debate.debate_time);\r\n        setWriteDate(response.debate.debate.debate_date);\r\n        setDiscuss1(response.debate.detail[0].discuss);\r\n        setDiscuss2(response.debate.detail[1].discuss);\r\n        setContent(response.debate.debate.debate_content);\r\n      });\r\n  }, [url]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"writeView\" style={{ marginTop: \"50px\" }}>\r\n        <div\r\n          className=\"divDiscuss\"\r\n          style={{\r\n            width: \"100%\",\r\n            display: \"inline\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <div\r\n            className=\"writeInfo\"\r\n            style={{\r\n              display: \"inline-block\",\r\n              width: \"25%\",\r\n              textAlign: \"left\",\r\n              fontWeight: \"800\",\r\n            }}\r\n          >\r\n            <label>작성자: {debWriter}</label>\r\n            <img\r\n              src={thumnail}\r\n              style={{ height: \"50px\", marginLeft: \"20px\" }}\r\n              alt={\"썸네일\"}\r\n            ></img>\r\n\r\n            <label>작성시간 : {writeDate}</label>\r\n          </div>\r\n          <label className=\"labelDiscuss\" style={{ width: \"20%\" }}>\r\n            주장 1 <br />\r\n            <input\r\n              className=\"inputDiscuss1\"\r\n              name=\"discuss1\"\r\n              value={discuss1}\r\n              style={{ textAlign: \"center\", width: \"100%\" }}\r\n              readOnly\r\n            ></input>\r\n          </label>\r\n          <label className=\"vs\" style={{ textAlign: \"center\", width: \"5%\" }}>\r\n            {\" \"}\r\n            VS{\" \"}\r\n          </label>\r\n          <label className=\"labelDiscuss\" style={{ width: \"20%\" }}>\r\n            주장 2 <br />\r\n            <input\r\n              className=\"inputDiscuss2\"\r\n              name=\"discuss2\"\r\n              value={discuss2}\r\n              style={{ textAlign: \"center\", width: \"100%\" }}\r\n              readOnly\r\n            ></input>\r\n          </label>\r\n          <div\r\n            className=\"debInfo\"\r\n            style={{\r\n              display: \"inline-block\",\r\n              width: \"25%\",\r\n              margin: \"0px 10px\",\r\n            }}\r\n          >\r\n            <label style={{ marginBottom: \"10px\", fontWeight: \"600\" }}>\r\n              토론일자 :\r\n              <input\r\n                className=\"debDate\"\r\n                value={debDate}\r\n                style={{ textAlign: \"center\", marginLeft: \"10px\" }}\r\n                readOnly\r\n              ></input>\r\n            </label>\r\n            <label style={{ marginBottom: \"10px\", fontWeight: \"600\" }}>\r\n              토론시간 :\r\n              <input\r\n                className=\"debTime\"\r\n                value={debTime}\r\n                style={{ textAlign: \"center\", marginLeft: \"10px\" }}\r\n                readOnly\r\n              ></input>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"divEditor\" style={{ overflow: \"auto\" }}>\r\n          <CKEditor\r\n            editor={ClassicEditor}\r\n            data={content}\r\n            onReady={(editor) => {\r\n              editor.isReadOnly = true;\r\n              setCkeditor(editor);\r\n              //editor.isReadOnly = { readOnly };\r\n              // You can store the \"editor\" and use when it is needed.\r\n              //console.log(\"Editor is ready to use!\", editor);\r\n            }}\r\n            // onChange={changeEditor}\r\n            // onBlur={(event, editor) => {\r\n            //   console.log(\"Blur.\", editor);\r\n            // }}\r\n            // onFocus={(event, editor) => {\r\n            //   console.log(\"Focus.\", editor);\r\n            // }}\r\n          />\r\n        </div>\r\n        <div className=\"divWriteButton\" style={{ textAlign: \"right\" }}>\r\n          <Button\r\n            className=\"buttonWrite\"\r\n            variant=\"outline-success\"\r\n            size=\"sm\"\r\n            style={{ margin: \"10px\" }}\r\n            type=\"submit\"\r\n          >\r\n            수정하기\r\n          </Button>\r\n          <Link to=\"/ta_front/debrecruit.html\">\r\n            <Button\r\n              className=\"buttonBack\"\r\n              variant=\"outline-success\"\r\n              size=\"sm\"\r\n              style={{ margin: \"10px\" }}\r\n            >\r\n              돌아가기\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Header from \"./component/Header\";\nimport DebateList from \"./component/DebateList\";\nimport \"react-bootstrap\";\nimport DebWrite from \"./component/DebWrite\";\nimport DebateSearch from \"./component/DebateSearch\";\nimport DebateView from \"./component/DebateView\";\nimport { Container } from \"react-bootstrap\";\nfunction App() {\n  return (\n    <Container>\n      <BrowserRouter>\n        <div className=\"App\">\n          <Header />\n          <Switch>\n            <Route path=\"/ta_front/debrecruit.html\">\n              <DebateList />\n            </Route>\n            <Route path=\"/ta_front/debrecruit/search/:word\">\n              <DebateSearch />\n            </Route>\n            <Route path=\"/ta_front/debrecruit/write\">\n              <DebWrite />\n            </Route>\n            <Route path=\"/ta_front/debrecruit/:no\">\n              <DebateView />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}